"use strict";

var {
  REPORTING_COMMAND_STATUS
} = require('./consts');

var parseCommand = command => {
  var logs = command.attributes.logs;

  if (!logs || !logs[0] || !logs[0].toJSON && typeof logs[0].toJSON !== 'function') {
    return;
  }

  return logs[0].toJSON();
};

var safeStringify = function safeStringify(obj) {
  var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var cache = [];
  var retVal;
  var items = 0;

  try {
    retVal = JSON.stringify(obj, (key, value) => {
      items++;

      if (items > 30) {
        return undefined;
      }

      return typeof value === "object" && value !== null ? cache.includes(value) ? undefined // Duplicate reference found, discard key
      : cache.push(value) && value // Store value in our collection
      : value;
    }, indent);
  } catch (e) {
    /* ignore error */
  }

  cache = null;
  return retVal;
};

var dataToString = data => typeof data === 'object' ? safeStringify(data, 2) : data;

var consolePropsToParameters = command => {
  var parsedCommand = parseCommand(command);

  if (!parsedCommand || !parsedCommand.consoleProps || !Object.keys(parsedCommand.consoleProps).length) {
    return;
  }

  return Object.entries(parsedCommand.consoleProps).map((_ref) => {
    var [name, value] = _ref;
    return {
      name,
      value: dataToString(value)
    };
  });
};

var attributesPropsToParameters = command => {
  return command.attributes.args.map((arg, index) => ({
    name: 'param-' + index,
    value: dataToString(arg)
  }));
};

var getParameters = command => {
  return consolePropsToParameters(command) || attributesPropsToParameters(command);
};

var getCommandParams = function getCommandParams(command) {
  var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : REPORTING_COMMAND_STATUS.SUCCESS;
  var screenshots = [];
  var parsedCommand = parseCommand(command) || {
    message: dataToString(command.attributes.args[0])
  };

  if (command.attributes.name === 'screenshot') {
    screenshots.push(parsedCommand.consoleProps.path);
  } // TODO: (NP-44689) on writeFile command add it to test artifacts


  return {
    status,
    startTime: command.startTime,
    endTime: new Date().getTime(),
    name: command.attributes.name,
    message: parsedCommand.message,
    commandType: 'DEFAULT',
    // TODO: (NP-44698) use also ASSERTION
    parameters: getParameters(command),
    screenshots // expectedData, // TODO: (NP-44699) support expectedData type IMAGE_KEY
    // resultData

  };
};

module.exports = {
  getCommandParams: getCommandParams
};