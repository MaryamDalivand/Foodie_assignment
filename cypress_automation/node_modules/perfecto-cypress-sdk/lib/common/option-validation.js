"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateInitOptions = exports.validateUploadOptions = exports.validateRunOptions = exports.validatePackOptions = void 0;

var _argumentValidator = _interopRequireDefault(require("argument-validator"));

var _consts = require("./consts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var validateCredentials = credentials => {
  _argumentValidator.default.string(credentials === null || credentials === void 0 ? void 0 : credentials.cloud, 'credentials.cloud');

  _argumentValidator.default.string(credentials === null || credentials === void 0 ? void 0 : credentials.securityToken, 'credentials.securityToken');
};

var validatePackOptions = (pathRegex, ignore, outPath) => {
  _argumentValidator.default.string(pathRegex, 'pathRegex | tests.path');

  _argumentValidator.default.arrayOrEmpty(ignore, 'ignoreRegexList | tests.ignore');

  _argumentValidator.default.string(outPath, 'outPath');
};

exports.validatePackOptions = validatePackOptions;

var validateRunOptions = mergedParams => {
  var _mergedParams$tests, _mergedParams$tests2, _mergedParams$tests3, _mergedParams$tests4;

  validateCredentials(mergedParams.credentials);

  _argumentValidator.default.string((_mergedParams$tests = mergedParams.tests) === null || _mergedParams$tests === void 0 ? void 0 : _mergedParams$tests.path, 'tests.path');

  _argumentValidator.default.string(((_mergedParams$tests2 = mergedParams.tests) === null || _mergedParams$tests2 === void 0 ? void 0 : _mergedParams$tests2.path) || ((_mergedParams$tests3 = mergedParams.tests) === null || _mergedParams$tests3 === void 0 ? void 0 : _mergedParams$tests3.artifactKey), 'tests.artifactKey');

  _argumentValidator.default.objectOrEmpty(mergedParams.env || {}, 'env');

  _argumentValidator.default.string((_mergedParams$tests4 = mergedParams.tests) === null || _mergedParams$tests4 === void 0 ? void 0 : _mergedParams$tests4.specsExt, 'tests.specsExt');

  _argumentValidator.default.array(mergedParams.capabilities, 'capabilities');

  _argumentValidator.default.objectOrEmpty(mergedParams.reporting || {}, 'reporting');

  _argumentValidator.default.stringOrEmpty(mergedParams.nodeVersion || '', 'nodeVersion');

  if (!Object.values(_consts.SUPPORTED_FRAMEWORKS).includes(mergedParams.framework)) {
    throw new Error("Invalid string value: ".concat(mergedParams.framework, "\nArgument Name: framework.\nit has to be one of ").concat(Object.values(_consts.SUPPORTED_FRAMEWORKS)));
  }
};

exports.validateRunOptions = validateRunOptions;

var validateUploadOptions = (archive, folderType, temporary, credentials) => {
  validateCredentials(credentials);

  _argumentValidator.default.string(archive, 'archive');

  _argumentValidator.default.string(folderType, 'folderType');

  _argumentValidator.default.boolean(temporary, 'temporary');

  if (folderType && !_consts.REPOSITORY_FOLDER_TYPES.includes(folderType)) {
    throw new Error("Invalid string value: ".concat(folderType, "\nArgument Name: folderType.\nit has to be one of ").concat(_consts.REPOSITORY_FOLDER_TYPES));
  }
};

exports.validateUploadOptions = validateUploadOptions;

var validateInitOptions = function validateInitOptions(testsRoot) {
  var cloud = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var projectName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  _argumentValidator.default.string(testsRoot, 'testsRoot');

  _argumentValidator.default.stringOrEmpty(cloud, 'cloud');

  _argumentValidator.default.stringOrEmpty(projectName, 'projectName');
};

exports.validateInitOptions = validateInitOptions;