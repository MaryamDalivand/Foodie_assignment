"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = void 0;

var _optionsBuilder = require("./options-builder");

var _configMergeUtil = require("./config-merge-util");

var _run = _interopRequireDefault(require("../run"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var command = 'run';
exports.command = command;
var desc = 'Run Cypress tests on Perfecto cloud';
exports.desc = desc;

var builder = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _optionsBuilder.credentialsOptions), _optionsBuilder.testsOptions), _optionsBuilder.reportingOptions), {}, {
  nodeVersion: {
    alias: 'n',
    type: 'string',
    describe: 'Specify Node.js version for Cypress execution environment'
  },
  env: {
    alias: 'e',
    type: 'object',
    usage: '--env.CYPRESS_BASE_URL=https://google.com',
    describe: 'environment variables to attach to `cypress run` command --env.CYPRESS_BASE_URL=https://google.com'
  }
}, _optionsBuilder.configOptions);

exports.builder = builder;

var handler = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (argv) {
    var configObject = (0, _configMergeUtil.mergeConfigWithParams)(argv);
    yield (0, _run.default)(configObject);
  });

  return function handler(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.handler = handler;