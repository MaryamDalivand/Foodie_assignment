"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeConfigWithParams = exports.parseCustomFields = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var parseCustomFields = (fieldsA, fieldsB) => {
  var fieldsArray = [...(fieldsA || []), ...(fieldsB || [])];
  if (!(fieldsArray === null || fieldsArray === void 0 ? void 0 : fieldsArray.length)) return;
  var customFieldsMap = fieldsArray.reduce((acc, item) => {
    var [key, value] = item === null || item === void 0 ? void 0 : item.split(',');

    if (!key || !value) {
      throw 'reporting.customField should be a string with comma: fieldKey,fieldValue';
    }

    acc.set(key, {
      name: key,
      value
    });
    return acc;
  }, new Map());
  return [...customFieldsMap.values()];
};

exports.parseCustomFields = parseCustomFields;

var mergeConfigWithParams = argv => {
  var _argv$config, _argv$config$reportin, _argv$reporting;

  var configCustom = ((_argv$config = argv.config) === null || _argv$config === void 0 ? void 0 : (_argv$config$reportin = _argv$config.reporting) === null || _argv$config$reportin === void 0 ? void 0 : _argv$config$reportin.customFields) || [];
  var optionsCustom = ((_argv$reporting = argv.reporting) === null || _argv$reporting === void 0 ? void 0 : _argv$reporting.customFields) || [];
  var customFields = parseCustomFields(configCustom, optionsCustom);
  return _objectSpread(_objectSpread({}, argv.config), {}, {
    reporting: _objectSpread(_objectSpread({}, argv === null || argv === void 0 ? void 0 : argv.reporting), {}, {
      customFields
    }),
    env: _objectSpread(_objectSpread({}, argv.config.env), argv.env),
    tests: argv === null || argv === void 0 ? void 0 : argv.tests,
    nodeVersion: argv === null || argv === void 0 ? void 0 : argv.nodeVersion,
    credentials: argv === null || argv === void 0 ? void 0 : argv.credentials
  });
};

exports.mergeConfigWithParams = mergeConfigWithParams;