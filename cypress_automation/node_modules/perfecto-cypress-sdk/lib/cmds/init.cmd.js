"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = void 0;

var _yargsInteractive = _interopRequireDefault(require("yargs-interactive"));

var _init = _interopRequireDefault(require("../init"));

var _optionsBuilder = require("./options-builder");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var command = 'init';
exports.command = command;
var desc = 'init Perfecto and Cypress configuration files';
exports.desc = desc;

var builder = _objectSpread(_objectSpread({
  prompt: {
    default: true,
    hidden: true,
    boolean: true
  },
  'tests.path': _objectSpread({}, _optionsBuilder.testsOptions['tests.path'])
}, _optionsBuilder.credentialsOptions), {}, {
  skip: {
    type: 'boolean',
    default: false,
    describe: 'Skip interactive questions'
  }
});

exports.builder = builder;

var getInitOptions = argv => {
  var _argv$credentials, _argv$credentials2, _argv$tests, _argv$tests2;

  return {
    cloud: {
      type: 'input',
      default: (_argv$credentials = argv.credentials) === null || _argv$credentials === void 0 ? void 0 : _argv$credentials.cloud,
      describe: 'Enter Perfecto cloud name'
    },
    securityToken: {
      type: 'input',
      default: (_argv$credentials2 = argv.credentials) === null || _argv$credentials2 === void 0 ? void 0 : _argv$credentials2.securityToken,
      describe: 'Enter your Perfecto security token'
    },
    testsPath: _objectSpread({
      type: 'input',
      default: ((_argv$tests = argv.tests) === null || _argv$tests === void 0 ? void 0 : _argv$tests.path) || './',
      describe: 'Enter path for cypress folder'
    }, ((_argv$tests2 = argv.tests) === null || _argv$tests2 === void 0 ? void 0 : _argv$tests2.path) ? {} : {
      prompt: 'always'
    })
  };
};

var handler = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (argv) {
    if (argv.skip) {
      var _argv$credentials3, _argv$credentials4, _argv$tests3;

      (0, _init.default)((_argv$credentials3 = argv.credentials) === null || _argv$credentials3 === void 0 ? void 0 : _argv$credentials3.cloud, (_argv$credentials4 = argv.credentials) === null || _argv$credentials4 === void 0 ? void 0 : _argv$credentials4.securityToken, (_argv$tests3 = argv.tests) === null || _argv$tests3 === void 0 ? void 0 : _argv$tests3.path);
    } else {
      var options = getInitOptions(argv);
      var result = yield (0, _yargsInteractive.default)().interactive(_objectSpread(_objectSpread({}, options), {}, {
        interactive: {
          default: argv.prompt
        }
      }));
      (0, _init.default)(result.cloud, result.securityToken, result.testsPath);
    }
  });

  return function handler(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.handler = handler;