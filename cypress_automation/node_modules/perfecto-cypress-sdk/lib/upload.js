"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _axios = _interopRequireDefault(require("axios"));

var _formData = _interopRequireDefault(require("form-data"));

var _api = require("./common/api");

var _optionValidation = require("./common/option-validation");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (archive, folderType, temporary, _ref) {
    var {
      cloud,
      securityToken
    } = _ref;
    (0, _optionValidation.validateUploadOptions)(archive, folderType, temporary, {
      cloud,
      securityToken
    });
    console.log('Start uploading archive:', archive);

    var archiveFile = _fs.default.readFileSync(_path.default.resolve(archive));

    var parsedPath = _path.default.parse(archive);

    if (parsedPath.ext !== '.zip') {
      throw 'Only zip files allowed as tests archive, actual file ext is: ' + parsedPath.ext;
    }

    var artifactId = parsedPath.name + parsedPath.ext;

    if (temporary) {
      artifactId = new Date().getTime() + '_' + artifactId;
    }

    var artifactKeyIdentifier = folderType + ':' + artifactId;
    var formData = new _formData.default();
    var requestPart = {
      contentType: 'application/zip',
      artifactType: 'GENERAL',
      folderType,
      keyDetails: {
        artifactId: artifactId
      },
      temporary,
      fileName: artifactId
    };
    formData.append('requestPart', JSON.stringify(requestPart));
    formData.append('inputPart', archiveFile);

    try {
      yield _axios.default.put((0, _api.getRepositoryUrl)(cloud), formData, {
        headers: _objectSpread(_objectSpread({}, formData.getHeaders()), (0, _api.getPerfectoHeaders)(cloud, securityToken))
      });
    } catch (error) {
      throw 'Upload tests archive failed: ' + (0, _api.parseReportingError)(error);
    }

    console.log('Tests archive uploaded:', artifactKeyIdentifier);
    return artifactKeyIdentifier;
  });

  return function (_x, _x2, _x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

exports.default = _default;