"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getSpecs = void 0;

var _glob = _interopRequireDefault(require("glob"));

var _axios = _interopRequireDefault(require("axios"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _pack = _interopRequireDefault(require("./pack"));

var _upload = _interopRequireDefault(require("./upload"));

var _monitor = _interopRequireDefault(require("./monitor-session/monitor"));

var _api = require("./common/api");

var _defaults = require("./common/defaults");

var _optionValidation = require("./common/option-validation");

var _utils = require("./common/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var sdkVersion = require('../package.json').version;

var getSpecs = (testsRoot, specExt, ignore) => {
  var _specs;

  var specsPattern = specExt;
  var specs;

  try {
    specs = (0, _glob.default)(specsPattern, {
      cwd: _path.default.resolve(testsRoot),
      ignore: (0, _utils.getIgnoredFiles)(ignore),
      sync: true
    });
  } catch (error) {
    throw new Error('Failed to fined spec files: ' + error);
  }

  if (!((_specs = specs) === null || _specs === void 0 ? void 0 : _specs.length)) {
    throw new Error('No spec files found for: ' + specsPattern + '\nUse --help for more information');
  }

  return specs;
};

exports.getSpecs = getSpecs;

var validatePackageFile = () => {
  if (!_fs.default.existsSync('package.json')) {
    throw '\nError: package.json file not found, you can use init command to create it or create it manually.\n';
  }
};

var _default = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (_ref) {
    var {
      credentials,
      tests,
      capabilities,
      reporting,
      scriptName,
      framework,
      env,
      nodeVersion
    } = _ref;
    (0, _optionValidation.validateRunOptions)({
      credentials,
      tests,
      capabilities,
      reporting,
      framework,
      env,
      nodeVersion
    });
    validatePackageFile();
    var artifactKey = tests.artifactKey;

    if (!artifactKey) {
      var zipFilePath = yield (0, _pack.default)(tests.path, tests.ignore, _defaults.DEFAULT_ARCHIVE_PATH);
      artifactKey = yield (0, _upload.default)(zipFilePath, 'PRIVATE', true, credentials);

      _fs.default.unlink(zipFilePath, () => {
        /* Nothing to do here, is is ok if it failed */
      });
    }

    var specs = getSpecs(tests.path, tests.specsExt, tests.ignore);
    var session;

    try {
      session = yield _axios.default.post((0, _api.getBackendBaseUrl)(credentials.cloud) + '/sessions', {
        capabilities,
        reporting,
        artifactKey,
        scriptName,
        framework,
        env,
        sdkVersion,
        nodeVersion,
        specsExt: tests.specsExt,
        specs
      }, {
        headers: (0, _api.getPerfectoHeaders)(credentials.cloud, credentials.securityToken)
      });
    } catch (error) {
      var _error$response, _error$response2, _error$response3;

      if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404 && (error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) === "") {
        //error from ngnix
        throw '\nFailed to create session: ' + error.message + ' - ' + "cypress is not enabled on this cloud, please contact support";
      }

      throw '\nFailed to create session: ' + error.message + '\n' + JSON.stringify(error === null || error === void 0 ? void 0 : (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data, null, 2);
    }

    return (0, _monitor.default)(credentials, session);
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports.default = _default;