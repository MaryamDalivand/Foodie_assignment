"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./common/on-exit");

var _run2 = _interopRequireDefault(require("./run"));

var _pack = _interopRequireDefault(require("./pack"));

var _upload2 = _interopRequireDefault(require("./upload"));

var _init = _interopRequireDefault(require("./init"));

var _defaults = require("./common/defaults");

var _configMergeUtil = require("./cmds/config-merge-util");

var _env = require("./common/env");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var configFilePath = (0, _env.getConfigPath)();

var getConfigFile = () => {
  if (!configFilePath) {
    return {};
  }

  var config = {};

  try {
    config = require(configFilePath);
  } catch (error) {
    throw 'Config file not found: ' + error.message;
  }

  return config;
};

var perfectoCypress = {
  withConfigFile: function withConfigFile() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _defaults.DEFAULT_CONFIG_PATH;
    configFilePath = path;
  },
  run: function () {
    var _run = _asyncToGenerator(function* () {
      var _config$reporting;

      var {
        credentials = {},
        tests,
        capabilities,
        reporting,
        env,
        nodeVersion
      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var config = getConfigFile();
      var customFields = (0, _configMergeUtil.parseCustomFields)(config === null || config === void 0 ? void 0 : (_config$reporting = config.reporting) === null || _config$reporting === void 0 ? void 0 : _config$reporting.customFields, reporting === null || reporting === void 0 ? void 0 : reporting.customFields);
      var envSecurityToken = (0, _env.getSecurityToken)();

      if (envSecurityToken) {
        credentials.securityToken = (credentials === null || credentials === void 0 ? void 0 : credentials.securityToken) || envSecurityToken;
      }

      var mergedParams = _objectSpread(_objectSpread({}, config), {}, {
        credentials: _objectSpread(_objectSpread({}, config === null || config === void 0 ? void 0 : config.credentials), credentials),
        env: _objectSpread(_objectSpread({}, config.env), env),
        tests: _objectSpread(_objectSpread(_objectSpread({}, {
          specsExt: _defaults.DEFAULT_TESTS_SPECS_EXT
        }), config === null || config === void 0 ? void 0 : config.tests), tests),
        reporting: _objectSpread(_objectSpread(_objectSpread({}, config === null || config === void 0 ? void 0 : config.reporting), reporting), {}, {
          customFields
        }),
        nodeVersion: nodeVersion || (config === null || config === void 0 ? void 0 : config.nodeVersion),
        capabilities: capabilities || (config === null || config === void 0 ? void 0 : config.capabilities) || []
      });

      return yield (0, _run2.default)(mergedParams);
    });

    function run() {
      return _run.apply(this, arguments);
    }

    return run;
  }(),
  pack: function pack(testsRoot, ignoreRegexList) {
    var _config$tests, _config$tests2;

    var outPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _defaults.DEFAULT_ARCHIVE_PATH;
    var config = getConfigFile();
    var mergedParams = {
      testsRoot: testsRoot || (config === null || config === void 0 ? void 0 : (_config$tests = config.tests) === null || _config$tests === void 0 ? void 0 : _config$tests.path),
      ignore: ignoreRegexList || (config === null || config === void 0 ? void 0 : (_config$tests2 = config.tests) === null || _config$tests2 === void 0 ? void 0 : _config$tests2.ignore),
      outPath: outPath || _defaults.DEFAULT_ARCHIVE_PATH
    };
    return (0, _pack.default)(mergedParams.testsRoot, mergedParams.ignore, mergedParams.outPath);
  },
  upload: function () {
    var _upload = _asyncToGenerator(function* () {
      var _config$credentials, _config$credentials2;

      var archive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _defaults.DEFAULT_ARCHIVE_PATH + _defaults.DEFAULT_ARCHIVE_FILE_NAME;
      var folderType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _defaults.DEFAULT_ARCHIVE_FOLDER_TYPE;
      var temporary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _defaults.DEFAULT_ARCHIVE_IS_TEMP;
      var {
        cloud,
        securityToken
      } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var config = getConfigFile();
      var credentials = {
        cloud: cloud || (config === null || config === void 0 ? void 0 : (_config$credentials = config.credentials) === null || _config$credentials === void 0 ? void 0 : _config$credentials.cloud),
        securityToken: securityToken || (config === null || config === void 0 ? void 0 : (_config$credentials2 = config.credentials) === null || _config$credentials2 === void 0 ? void 0 : _config$credentials2.securityToken)
      };
      return yield (0, _upload2.default)(archive, folderType, temporary, credentials);
    });

    function upload() {
      return _upload.apply(this, arguments);
    }

    return upload;
  }(),
  init: (testsRoot, cloud, projectName) => {
    (0, _init.default)(testsRoot, cloud, projectName);
  }
};
var _default = perfectoCypress;
exports.default = _default;