"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logHelpers = require("./log-helpers");

var _chalk = _interopRequireDefault(require("chalk"));

var _sessionData = _interopRequireDefault(require("./session-data"));

var _tasksLogger = _interopRequireDefault(require("./tasks-logger"));

var _consts = require("../common/consts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isTitlePrinted = false;

var renderTest = (_ref) => {
  var {
    platform,
    test
  } = _ref;
  return "Test summary: ".concat(test.status, " | ").concat((0, _logHelpers.printDuration)(test.duration), " | TestName: ").concat(test.testName, " | Platform: ").concat((0, _logHelpers.objectToHash)(platform));
};

var renderSpec = spec => {
  var failingText = spec.Failing ? _chalk.default.red("| Failing: ".concat(spec.Failing)) : '';
  return "".concat(spec.Status, " | ").concat((0, _logHelpers.printDuration)(spec.Duration), " ").concat(spec.SPEC, " | Tests: ").concat(spec.Tests, " | Passing: ").concat(spec.Passing) + failingText + ' | Platform: ' + spec.platformHash;
};

var renderBlockedExecution = blockedExecution => {
  return "".concat(blockedExecution.Status, " | Platform:") + blockedExecution.platformHash;
};

var renderExecutionsSummery = sessionData => {
  return '\nExecutions Summery: executions: ' + sessionData.length + '| Passed: ' + sessionData.filter(d => {
    var _d$result;

    return ((_d$result = d.result) === null || _d$result === void 0 ? void 0 : _d$result.resultState) === "SUCCESS";
  }).length + ' | Failed: ' + sessionData.filter(d => {
    var _d$result2;

    return ((_d$result2 = d.result) === null || _d$result2 === void 0 ? void 0 : _d$result2.resultState) === "FAILED";
  }).length + ' | blocked: ' + sessionData.filter(d => {
    var _d$result3;

    return ((_d$result3 = d.result) === null || _d$result3 === void 0 ? void 0 : _d$result3.resultState) === "BLOCKED";
  }).length;
};

var _default = (title, status, ended) => {
  if (!isTitlePrinted) {
    console.log(title);
    isTitlePrinted = true;
  }

  var executions = _sessionData.default.getSessionData();

  if (executions && executions.length) {
    executions.forEach(execution => {
      if (execution.executionState !== _consts.SessionState.DONE) {
        return;
      }

      if (_tasksLogger.default.resolveAllTasks() && !execution.isPrinted) {
        var _execution$result, _execution$result2, _execution$result3, _execution$result4;

        execution.isPrinted = true;

        if (execution.tests) {
          execution.tests.forEach(test => {
            console.log(renderTest({
              test,
              platform: execution.platform
            }));

            if (test.status === _consts.TestResults.FAILED) {
              console.log('Error message: ' + test.message);
            }
          });
        }

        var resultMessage = ((_execution$result = execution.result) === null || _execution$result === void 0 ? void 0 : _execution$result.resultMessage) ? ' ' + ((_execution$result2 = execution.result) === null || _execution$result2 === void 0 ? void 0 : _execution$result2.resultMessage) : '';
        var resultState = ((_execution$result3 = execution.result) === null || _execution$result3 === void 0 ? void 0 : _execution$result3.resultState) ? ' ' + ((_execution$result4 = execution.result) === null || _execution$result4 === void 0 ? void 0 : _execution$result4.resultState) : '';
        console.log('\nExecution summary: ' + (0, _logHelpers.objectToHash)(execution.platform) + resultState + resultMessage + '\n' + (0, _logHelpers.getReportingExecutionLink)(_sessionData.default.getCloud(), execution.executionId) + '\n');
      }
    });
  }

  if (ended) {
    var specList = _sessionData.default.getSpecsSummary();

    if (specList.length > 0) {
      console.log('\nSpecs Summary:');
      specList.forEach(spec => console.log(renderSpec(spec)));
    }

    var blockedExecutions = _sessionData.default.getBlockedExecutionsSummary();

    if (blockedExecutions.length > 0) {
      console.log('\nPlease note, some of the executions has blocked status:');
      blockedExecutions.forEach(execution => console.log(renderBlockedExecution(execution)));
    }

    console.log(renderExecutionsSummery(_sessionData.default.getSessionData()));
  }
};

exports.default = _default;