"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _sessionData = _interopRequireDefault(require("./session-data"));

var _consoleTablePrinter = require("console-table-printer");

var _logUpdate = _interopRequireDefault(require("log-update"));

var logHelpers = _interopRequireWildcard(require("./log-helpers"));

var _consts = require("../common/consts");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dotter = {
  dotes: ['.', '.'],
  getDotes: () => {
    if (dotter.dotes.length >= 10) {
      dotter.dotes = ['.', '.'];
    }

    dotter.dotes.push('.');
    return dotter.dotes.join('');
  }
};

var getPrintableData = (title, status, ended) => {
  var testsPrintableData = _sessionData.default.getSessionData().map(execution => {
    var _execution$result, _execution$result2;

    var testsTable = new _consoleTablePrinter.Table({
      title: execution.platformHash + '\n\t' + ((_execution$result = execution.result) === null || _execution$result === void 0 ? void 0 : _execution$result.resultState) + ' ' + (((_execution$result2 = execution.result) === null || _execution$result2 === void 0 ? void 0 : _execution$result2.resultMessage) || '') + '\n\t' + (0, logHelpers.getReportingExecutionLink)(_sessionData.default.getCloud(), execution.executionId),
      columns: [{
        name: 'Test Name',
        alignment: 'left'
      }, {
        name: 'Duration',
        alignment: 'left'
      }, {
        name: 'Message',
        alignment: 'left',
        color: 'red'
      }]
    });
    execution.tests.forEach(test => {
      testsTable.addRow({
        'Test Name': _consts.StatusIcons[test.status] + ' ' + test.testName,
        Duration: logHelpers.printDuration(test.duration),
        Message: test.status === _consts.TestResults.FAILED ? logHelpers.truncate(test.message, 40) : ''
      });
    });
    return testsTable.render();
  });

  var specsTable = new _consoleTablePrinter.Table({
    title: 'Specs Summary',
    columns: [{
      name: 'SPEC',
      alignment: 'left'
    }, {
      name: 'Tests',
      alignment: 'left'
    }, {
      name: 'Passing',
      alignment: 'left'
    }, {
      name: 'Platform',
      alignment: 'left'
    }, {
      name: 'Failing',
      alignment: 'left',
      color: 'red'
    }]
  });

  var specsList = _sessionData.default.getSpecsSummary();

  specsList.forEach(spec => specsTable.addRow({
    SPEC: _consts.StatusIcons[spec.Status] + ' ' + logHelpers.printDuration(spec.Duration) + ' ' + spec.SPEC,
    Tests: spec.Tests,
    Passing: spec.Passing,
    Failing: spec.Failing || '',
    Platform: spec.platformHash
  }));
  return title + testsPrintableData.join('\n\n') + (specsList.length ? '\n' + specsTable.render() : '') + '\n\n' + (!specsList.length || ended ? '' : '⏳  Waiting for tests results' + dotter.getDotes());
};

var _default = (title, status, ended) => {
  var logText = getPrintableData(title, status, ended);
  (0, _logUpdate.default)(logText);

  if (ended) {
    _logUpdate.default.done();
  }
};

exports.default = _default;